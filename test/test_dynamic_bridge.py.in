# Copyright 2016 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import re

from launch import LaunchDescription
from launch import LaunchService
from launch.actions import ExecuteProcess
from launch_testing import LaunchTestService
from launch_testing.output import create_output_lines_filter
from launch_testing.output import create_output_regex_test


from ros2run.api import get_executable_path


TEST_BRIDGE_ROS1_ENV = '@TEST_BRIDGE_ROS1_ENV@'
TEST_BRIDGE_ROSCORE = '@TEST_BRIDGE_ROSCORE@'
TEST_BRIDGE_ROS1_TALKER = ['rosrun', 'roscpp_tutorials', 'talker']
TEST_BRIDGE_ROS1_LISTENER = ['rosrun', 'rospy_tutorials', 'listener']
TEST_BRIDGE_ROS1_CLIENT = '@TEST_BRIDGE_ROS1_CLIENT@'
TEST_BRIDGE_ROS1_SERVER = '@TEST_BRIDGE_ROS1_SERVER@'
TEST_BRIDGE_DYNAMIC_BRIDGE = '@TEST_BRIDGE_DYNAMIC_BRIDGE@'
TEST_BRIDGE_ROS2_TALKER = get_executable_path(
    package_name='demo_nodes_cpp', executable_name='talker')
TEST_BRIDGE_ROS2_LISTENER = get_executable_path(
    package_name='demo_nodes_cpp', executable_name='listener')
TEST_BRIDGE_ROS2_CLIENT = '@TEST_BRIDGE_ROS2_CLIENT@'
TEST_BRIDGE_ROS2_SERVER = '@TEST_BRIDGE_ROS2_SERVER@'
TEST_BRIDGE_RMW = '@TEST_BRIDGE_RMW@'


def get_default_launch_test_description(name):
    launch_description = LaunchDescription()
    launch_test = LaunchTestService()

    # ROS 1 core
    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS1_ENV, TEST_BRIDGE_ROSCORE],
            name=name + '__roscore',
        ), exit_allowed=True
    )

    # dynamic bridge
    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS1_ENV, TEST_BRIDGE_DYNAMIC_BRIDGE],
            name=name + '__dynamic_bridge',
        )
    )

    return launch_description, launch_test


def test_dynamic_bridge_msg_1to2():
    name = 'test_dynamic_bridge_msg_1to2'

    launch_description, launch_test = get_default_launch_test_description(name)

    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS1_ENV] + TEST_BRIDGE_ROS1_TALKER,
            name=name + '__ros1talker',
        )
    )

    action = launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS2_LISTENER],
            name=name + '__ros2listener',
            output='screen'
        ), exit_allowed=True
    )

    launch_test.add_output_test(
        launch_description, action,
        output_test=create_output_regex_test(
            expected_patterns=[re.compile(b'I heard.+')]
        ),
        output_filter=create_output_lines_filter(
            filtered_rmw_implementation=TEST_BRIDGE_RMW,
        )
    )

    launch(launch_test, launch_description)


def test_dynamic_bridge_msg_2to1():
    name = 'test_dynamic_bridge_msg_2to1'

    launch_description, launch_test = get_default_launch_test_description(name)

    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS2_TALKER],
            name=name + '__ros2talker',
        )
    )

    env = dict(os.environ)
    env['PYTHONUNBUFFERED'] = '1'
    action = launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS1_ENV] + TEST_BRIDGE_ROS1_LISTENER,
            name=name + '__ros1listener',
            env=env,
            output='screen'
        ), exit_allowed=True
    )

    launch_test.add_output_test(
        launch_description, action,
        output_test=create_output_regex_test(
            expected_patterns=[re.compile(b'I heard.+')]
        ),
        output_filter=create_output_lines_filter(
            filtered_rmw_implementation=TEST_BRIDGE_RMW,
        ),
        side_effect='shutdown',
    )

    launch(launch_test, launch_description)


def test_dynamic_bridge_srv_1to2():
    name = 'test_dynamic_bridge_srv_1to2'

    launch_description, launch_test = get_default_launch_test_description(name)

    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS1_ENV, TEST_BRIDGE_ROS1_SERVER],
            name=name + '__ros1server',
        )
    )

    launch_test.add_test_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS2_CLIENT],
            name=name + '__ros2client',
        )
    )

    launch(launch_test, launch_description)


def test_dynamic_bridge_srv_2to1():
    name = 'test_dynamic_bridge_srv_2to1'

    launch_description, launch_test = get_default_launch_test_description(name)

    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS2_SERVER],
            name=name + '__ros2server',
        )
    )

    launch_test.add_test_action(
        launch_description, ExecuteProcess(
            cmd=[TEST_BRIDGE_ROS1_ENV, TEST_BRIDGE_ROS1_CLIENT],
            name=name + '__ros1client',
        )
    )

    launch(launch_test, launch_description)


def launch(launch_test, launch_description):
    launch_service = LaunchService()
    launch_service.include_launch_description(launch_description)
    rc = launch_test.run(launch_service)

    assert rc == 0, \
        "The launch file failed with exit code '%s'" % str(rc)


if __name__ == '__main__':
    test_dynamic_bridge_msg_1to2()
    test_dynamic_bridge_msg_2to1()
    test_dynamic_bridge_srv_1to2()
    test_dynamic_bridge_srv_2to1()
